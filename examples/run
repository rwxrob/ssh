#!/usr/bin/bash

x.build-server-image () {
	podman build -t ssh-server server
}

x.build-client-image () {
	podman build -t ssh-client client
}

x.clean () {
  x.stop
	podman rmi ssh-server
}

x.start-servers () {
  for i in {1..3}; do
    if [[ -z "$(podman ps -q --filter "name=ssh-server$i")" ]]; then
      podman run -d -p "222$i:22" --rm --name "ssh-server$i" \
        --hostname "ssh-server$i" ssh-server
    fi
  done
}

x.stop-servers () {
  for i in {1..3}; do
    podman stop "ssh-server$i"
  done
}

x.check-servers () {
  [[ -z "$BUILDIP" ]] && echo '$BUILDIP' required && return 1
  for i in {1..3}; do
    podman run -it --rm ssh-client ssh "user@$BUILDIP" -p "222$i" -o StrictHostKeyChecking=no -i /home/user/.ssh/user hostname
  done
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
   for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi
